# -*- coding: utf-8 -*-
"""Salinan ready to deploy (pipeline).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TiVUCDP3zuwtB0v82WJ5fUu8Bia1kO8G
"""

#Import Library
import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay
import math
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.naive_bayes import GaussianNB, CategoricalNB, MultinomialNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report
from sklearn.preprocessing import OneHotEncoder
from sklearn.ensemble import BaggingClassifier
from sklearn.model_selection import train_test_split, GridSearchCV
import pickle

#Import Dataset
df = pd.read_csv("https://raw.githubusercontent.com/dJull/Tugas-Akhir-Naive-Bayes-API-Integration/master/loans_full_schema.csv ")

from sklearn.preprocessing import OrdinalEncoder


attr = ['homeownership','annual_income','debt_to_income','loan_purpose','loan_amount','balance','term', 'interest_rate', 'grade']
df = df[attr]

df.info()

# Splitting dataset to X and y
X = df.drop(columns="grade")
y = df['grade']


from sklearn.model_selection import train_test_split, GridSearchCV
# Split to 80% training data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3)

# Create pipeline for numerical
numerical_pipeline = Pipeline([
    ('numerical_imputation', SimpleImputer(strategy="mean")),
    ('scaler', StandardScaler())
    ])

# Create pipeline for categorical
categorical_pipeline = Pipeline([
    ('categorical_imputation', SimpleImputer(strategy="most_frequent")),
    ('encoder', OneHotEncoder())
    ])

# Create column transform
transform = ColumnTransformer([
    ('categoric', categorical_pipeline, ["homeownership", "loan_purpose"]),
    ('numeric', numerical_pipeline, ["annual_income","debt_to_income","loan_amount","balance","term","interest_rate"])
    ])
# Create pipeline for algorithm
pipeline = Pipeline([
    ('prep', transform),
    ('algo', GaussianNB())
])


# Fit Transform X_train and y_train
pipeline.fit(X_train,y_train)

# Prediction
y_pred = pipeline.predict(X_test)

# Evaluation
print(pipeline.score(X_train,y_train), pipeline.score(X_test,y_test))
print(classification_report(y_test,y_pred))

cm = confusion_matrix(y_test, y_pred, labels=pipeline.classes_)
cm

pickle.dump(pipeline,open("model.pkl","wb"))


